import React, { Component } from 'react';export default class Swiper extends Component {	constructor(props) {		super( props );		this.state = {			translateX: 0,			translateY: 0,			moving: false,			offset: 0		};		this.touch = {			step: 0,			startX: 0,			startY: 0,			curIndex: 0		};		this.direction = this.props.direction === 'vertical' ? 'Y' : 'X';		this.distance = 0;		this.cOffset = this.state.offset		this.touchRate = 2 / 3;	}	componentWillMount() {		console.log( this, 'this.willMount' );	}	componentDidMount() {		console.log( this, 'this.DidMount' );	}	/**	 * 组件销毁	 */	componentWillUnmount() {	}	/**	 * 运行中阶段 ----- 组件接收到属性时触发	 */	componentWillReceiveProps() {		console.log( '组件接收到属性时触发' );	}	render() {		const styles = {			wrapper: {				transform: `translate${this.direction}(${this.state.offset}px) translateZ(0px)`,				transition: `${this.state.moving ? 'none' : `transform 0.3s linear`}`			}		};		return (			<div className="s-container">				<div onTouchStart={this.start.bind( this )}						 onTouchMove={this.move.bind( this )}						 onTouchEnd={this.end.bind( this )}						 style={styles.wrapper} className={`s-wrapper s-${this.props.direction}-wrapper`}>					{this.props.children.map( item => item )}				</div>			</div>		);	}	start(e) {		const {pageX, pageY} = e.touches[0];		this.touch[`start${this.direction}`] = this.direction === 'X' ? pageX : pageY;	}	move(e) {		// 关闭css3动画		this.setState({			moving: true		});		const page = e.touches[0];		const touch = page[`page${this.direction}`];		const start = this.touch[`start${this.direction}`];		// 划过的距离		this.distance = touch - start;		this.setState({			offset: this.distance * this.touchRate  + this.cOffset		})	}	end(e) {		this.cOffset = this.state.offset;	}};