import React, { Component } from 'react';export default class Swiper extends Component {	constructor(props) {		super( props );		this.state = {			translateX: 0,			translateY: 0,			moving: false,			offset: 0		};		this.touch = {			startX: 0,			startY: 0,			curIndex: 1,		};		this.loop = this.props.loop || false;		this.autoPlay = Object.assign({}, this.props.autoPLay, {			auto: false,			interval: 3000		});		this.step = this.props.width || window.innerWidth;		this.direction = this.props.direction === 'vertical' ? 'Y' : 'X';		this.distance = 0;		this.cOffset = this.state.offset;		this.slidesLen = this.loop ? this.props.children.length + 2 : this.props.children.length;		console.log(this.slidesLen)		this.touchRate = 2 / 3;	}	componentWillMount() {		console.log( this, 'this.willMount' );	}	componentDidMount() {		console.log( this, 'this.DidMount' );	}	/**	 * 组件销毁	 */	componentWillUnmount() {	}	/**	 * 运行中阶段 ----- 组件接收到属性时触发	 */	componentWillReceiveProps() {		console.log( '组件接收到属性时触发' );	}	render() {		const styles = {			wrapper: {				transform: `translate${this.direction}(${this.state.offset}px) translateZ(0px)`,				transition: `${this.state.moving ? 'none' : `transform 0.3s linear`}`			}		};		return (			<div className="s-container">				<div onTouchStart={this.start.bind( this )}						 onTouchMove={this.move.bind( this )}						 onTouchEnd={this.end.bind( this )}						 style={styles.wrapper} className={`s-wrapper s-${this.props.direction}-wrapper`}>					{this.loop && this.props.children[this.props.children.length]}					{this.props.children.map( item => item )}					{this.loop && this.props.children[0]}				</div>				<div className="pagination">					{this.props.children.map((item, index) =>						(<div key={'pagination' + index} className={`pagination-item pagination_${index + 1} ${(index + 1) === this.touch.curIndex ? 'pagination-active' : ''}`}>{index}</div>))}				</div>			</div>		);	}	start(e) {		console.log(this.touch)		const {pageX, pageY} = e.touches[0];		this.touch[`start${this.direction}`] = this.direction === 'X' ? pageX : pageY;	}	move(e) {		// 关闭css3动画		this.setState( {			moving: true		} );		const page = e.touches[0];		const touch = page[`page${this.direction}`];		const start = this.touch[`start${this.direction}`];		// 划过的距离		this.distance = touch - start;		console.log( Math.abs( this.distance ) );		this.setState( {			offset: this.distance * this.touchRate + this.cOffset		} );	}	end(e) {		this.setState( {			moving: false		} );		this.cOffset = this.state.offset;		const {curIndex} = this.touch;		//  this.distance > 0 ? '正方向滑动' ->>> 减少一页 : '负方向滑' ->>> 增加一页		const type = this.distance > 0 ? 'des' : 'add';		Math.abs( this.distance ) > ( this.step / 5 ) ? this[`${type}OnePage`]( curIndex ) : this.reducePage();	}	// 加一页	addOnePage(index) {		index = Math.min( this.slidesLen, ++index );		this.touch.curIndex = index;		this.goToPage( index );	}	// 减一页	desOnePage(index) {		index = Math.max( 1, --index );		this.touch.curIndex = index;		this.goToPage( index );	}	reducePage() {		this.goToPage( this.touch.curIndex );	}	goToPage(index) {		const offset = -this.step * (index - 1);		this.cOffset = offset;		this.setState( {			offset: offset		} );	}};